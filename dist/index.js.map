{"version":3,"sources":["webpack://dyna-process-manager/webpack/universalModuleDefinition","webpack://dyna-process-manager/webpack/bootstrap","webpack://dyna-process-manager/./src/DynaProcess.ts","webpack://dyna-process-manager/./src/DynaProcessManager.ts","webpack://dyna-process-manager/./src/codeDataString.ts","webpack://dyna-process-manager/./src/index.ts","webpack://dyna-process-manager/external \"child_process\"","webpack://dyna-process-manager/external \"dyna-guid\"","webpack://dyna-process-manager/external \"dyna-logger/node\"","webpack://dyna-process-manager/external \"events\"","webpack://dyna-process-manager/external \"os\"","webpack://dyna-process-manager/external \"which\""],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"dyna-process-manager\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dyna-process-manager\"] = factory();\n\telse\n\t\troot[\"dyna-process-manager\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","// help: https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options\nimport * as cp                         from 'child_process';\nimport * as which                      from \"which\";\nimport {IError}                        from \"./interfaces\";\nimport {EventEmitter}                  from 'events';\nimport {guid}                          from \"dyna-guid\";\nimport {DynaLogger, IDynaLoggerConfig} from \"dyna-logger/node\";\n\nconst EOL: string = require('os').EOL;\n\nexport interface IDynaProcessConfig {\n  name: string;               // name this process for console messages and stats\n  cwd: string;                // Current working directory of the child process\n  command: string;            // full executable filename\n  args?: string | string[];   // arguments\n  env?: any;                  // Environment key-value pairs\n  guard?: IDynaProcessConfigGuard;\n  loggerSettings?: IDynaLoggerConfig;\n}\n\nexport interface IDynaProcessConfigGuard {\n  restartAfterMs: number;\n}\n\nexport enum EDynaProcessEvent {\n  STOP = 'STOP',                   // process terminated normally (exit code == 0)\n  CRASH = 'CRASH',                 // process terminated due to exception (exit code!== 0)\n  CONSOLE_ERROR = 'CONSOLE_ERROR', // errors detected from console.errors of the process\n}\n\nexport class DynaProcess extends EventEmitter {\n  constructor(private readonly _config: IDynaProcessConfig) {\n    super();\n\n    this._config = {\n      env: {},\n      ...(this._config),\n      loggerSettings: {\n        bufferLimit: 2000,\n        ...this._config.loggerSettings,\n      },\n    };\n\n    this.logger = new DynaLogger(this._config.loggerSettings);\n\n    if (this._config.command === \"node\") this._config.command = which.sync('node', {nothrow: true});\n  }\n\n  private _id: string = guid(1);\n  private _active: boolean = false;\n  private _process: cp.ChildProcess = null;\n  private _startedAt: Date = null;\n  private _stoppedAt: Date = null;\n  private _stopCalled: boolean = false;\n  private _lastExitCode: number = null;\n\n  public logger: DynaLogger;\n\n  public get id(): string {\n    return this._id;\n  }\n\n  public get active(): boolean {\n    return this._active;\n  }\n\n  // returns true if started and false if it was already started; rejects on errors\n  public start(): Promise<boolean> {\n    this._stopCalled = false;\n    return this._start();\n  }\n\n  public _start(): Promise<boolean> {\n    return new Promise((resolve: (started: boolean) => void, reject: (error: IError) => void) => {\n      const {command, args, cwd, env} = this._config;\n      let applyArgs: string[] =\n        Array.isArray(args)\n          ? args\n          : (args as string).split(' ').filter(a => !!a);\n      if (this._active) resolve(false);\n\n      try {\n        this._process = cp.spawn(\n          command,\n          applyArgs,\n          {\n            cwd,\n            env\n          }\n        );\n\n        this._active = true;\n\n        this._process.stdout.on('data', (text: string) => this._handleOnConsoleLog(text));\n        this._process.stderr.on('data', (text: string) => this._handleOnConsoleError(text));\n        this._process.on('close', (code: number, signal: string) => this._handleOnClose(code, signal));\n        this._process.on('error', (error: any) => this._handleProcessError(error));\n\n        this._startedAt = new Date();\n        this._stoppedAt = null;\n        this._lastExitCode = null;\n        resolve(true);\n      }\n      catch (error) {\n        this._active = false;\n        reject({\n          section: 'DynaProcess/start',\n          message: 'Process cannot start',\n          error,\n          data: {processSetup: this._config},\n        } as IError)\n      }\n    });\n  }\n\n  public stop(signal?: string): void {\n    // help: https://nodejs.org/api/child_process.html#child_process_subprocess_kill_signal\n    this._stopCalled = true;\n    this._process.kill(signal);\n  }\n\n  private _handleOnConsoleLog(text: string): void {\n    this._consoleLog(text, null, true);\n  }\n\n  private _handleOnConsoleError(text: string): void {\n    this._consoleError(text, null, true);\n    this.emit(EDynaProcessEvent.CONSOLE_ERROR);\n  }\n\n  private _handleOnClose(exitCode: number, signal: string): void {\n    // help: https://nodejs.org/api/child_process.html#child_process_event_close\n    const {guard} = this._config;\n\n    this._active = false;\n    this._stoppedAt = new Date;\n    this._lastExitCode = exitCode;\n\n    if (exitCode) {\n      this._consoleError(`Crashed! Exited with exit code [${exitCode}] and signal [${signal}]`,);\n      this.emit(EDynaProcessEvent.CRASH, {exitCode});\n      if (guard) {\n        if (!this._stopCalled) {\n          setTimeout(() => {\n            this._start();\n          }, guard.restartAfterMs || 0);\n        }\n        else {\n          this.emit(EDynaProcessEvent.STOP);\n        }\n      }\n    }\n    else {\n      this._consoleLog(`Stopped. Exited with exit code [${exitCode}] and signal [${signal}]`);\n      this.emit(EDynaProcessEvent.STOP);\n    }\n  }\n\n  private _handleProcessError(error: any): void {\n    this._consoleError('general error', {error, pid: this._process.pid});\n  }\n\n  private _consoleLog(message: string, data: any = undefined, processSays: boolean = false): void {\n    message = DynaProcess.cleanProcessConsole(message);\n    this.logger.log(`Process: ${this._config.name} ${this.id}`, `${processSays ? '> ' : ''}${message}`, data)\n  }\n\n  private _consoleError(message: string, data: any = undefined, processSays: boolean = false): void {\n    message = DynaProcess.cleanProcessConsole(message);\n    this.logger.error(`Process: ${this._config.name} ${this.id}`, `${processSays ? '> ' : ''}${message}`, data)\n  }\n\n  private static cleanProcessConsole(text: any): string {\n    text=text.toString();\n    if (text.endsWith(EOL)) text=text.slice(0, -EOL.length);\n    return text;\n  }\n}\n","import {DynaLogger, IDynaLoggerConfig}                      from \"dyna-logger/node\";\nimport {DynaProcess, EDynaProcessEvent, IDynaProcessConfig} from \"./DynaProcess\";\nimport {IError}                                             from \"./interfaces\";\n\nexport interface IDynaProcessManagerConfig {\n  loggerSettings?: IDynaLoggerConfig;\n}\n\nexport {IDynaLoggerConfig};\n\nexport class DynaProcessManager {\n  constructor(private readonly _config: IDynaProcessManagerConfig = {}) {\n    this._config = {\n      ...this._config,\n      loggerSettings: {\n        bufferLimit: 2000,\n        ...(this._config.loggerSettings || {}),\n      },\n    };\n    this._logger = new DynaLogger(this._config.loggerSettings);\n  }\n\n  private _logger: DynaLogger;\n  private _processes: { [id: string]: DynaProcess } = {};\n\n  public addProcess(processSetup: IDynaProcessConfig): DynaProcess {\n    if (!processSetup.loggerSettings) processSetup.loggerSettings = this._config.loggerSettings;\n    const newProcess = new DynaProcess(processSetup);\n    this._processes[newProcess.id] = newProcess;\n    return newProcess;\n  }\n\n  public removeProcess(processId: string): Promise<void> {\n    return new Promise((resolve: Function, reject: (error: IError) => void) => {\n      const process: DynaProcess = this.getProcess(processId);\n\n      if (!process) {\n        reject({\n          section: 'ProcessManager/removeProcess',\n          code: '3598644',\n          message: 'Process not found with this id',\n          data: {processId},\n        });\n        return;\n      }\n\n      if (process.active) {\n        reject({\n          section: 'ProcessManager/removeProcess',\n          code: '3598645',\n          message: 'Process is working',\n          data: {processId},\n        });\n        return;\n      }\n\n      delete this._processes[processId];\n      resolve();\n    });\n  }\n\n  public getProcess(processId: string): DynaProcess {\n    return this._processes[processId];\n  }\n\n  public get count(): number {\n    return Object.keys(this._processes).length;\n  }\n\n  public stop(processId: string): Promise<any> {\n    return new Promise((resolve: Function, reject: (error: IError) => void) => {\n      const process: DynaProcess = this.getProcess(processId);\n\n      if (!process) {\n        reject({\n          section: 'ProcessManager/stop',\n          code: '3598643',\n          message: 'Process not found with this id',\n          data: {processId},\n        });\n        return; // exit\n      }\n\n      if (!process.active) {\n        resolve();\n        return; // exit\n      }\n\n      const resolve_ = () => {\n        resolve();\n      };\n\n      process.on(EDynaProcessEvent.STOP, resolve_);\n      process.on(EDynaProcessEvent.CRASH, resolve_);\n\n      process.stop();\n    });\n  }\n\n  public stopAll(): Promise<void> {\n    return Promise.all(\n      Object.keys(this._processes)\n        .map((processId: string) => this.stop(processId))\n    ).then(() => undefined);\n  }\n}\n","export const encodeDataToString = <TData>(data: TData): string => encodeURI(JSON.stringify(data));\nexport const decodeStringToData = <TData>(encoded: string): TData => JSON.parse(decodeURI(encoded));\n","export {\n  DynaProcessManager,\n  IDynaProcessManagerConfig,\n  IDynaLoggerConfig,\n}from './DynaProcessManager';\n\nexport {\n  DynaProcess,\n  IDynaProcessConfig,\n  IDynaProcessConfigGuard,\n  EDynaProcessEvent,\n}from './DynaProcess';\n\nexport {\n  encodeDataToString,\n  decodeStringToData,\n} from \"./codeDataString\";\n","module.exports = require(\"child_process\");","module.exports = require(\"dyna-guid\");","module.exports = require(\"dyna-logger/node\");","module.exports = require(\"events\");","module.exports = require(\"os\");","module.exports = require(\"which\");"],"sourceRoot":""}